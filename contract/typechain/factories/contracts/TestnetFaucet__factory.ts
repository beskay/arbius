/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  TestnetFaucet,
  TestnetFaucetInterface,
} from "../../contracts/TestnetFaucet";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "faucet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60803461007457601f61023138819003918201601f19168301916001600160401b038311848410176100795780849260209460405283398101031261007457516001600160a01b0381169081900361007457600080546001600160a01b0319169190911790556040516101a190816100908239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c908163de5f72fd14610060575063fc0c546a1461003757600080fd5b3461005d578060031936011261005d57546040516001600160a01b039091168152602090f35b80fd5b905034610141578160031936011261014157815463a9059cbb60e01b825233600483015268056bc75e2d6310000060248301526020908290604490829086906001600160a01b03165af19081156101605782916100f8575b50156100c15780f35b60405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b905060203d8111610159575b601f8101601f1916820167ffffffffffffffff811183821017610145576020918391604052810103126101415751801515810361014157386100b8565b5080fd5b634e487b7160e01b84526041600452602484fd5b503d610104565b6040513d84823e3d90fdfea2646970667358221220f58cf5566095744ef5c62240d6b85ed381c6da581bc8ac0530cff355c106b22f64736f6c63430008130033";

type TestnetFaucetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestnetFaucetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestnetFaucet__factory extends ContractFactory {
  constructor(...args: TestnetFaucetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestnetFaucet> {
    return super.deploy(
      tokenAddress,
      overrides || {}
    ) as Promise<TestnetFaucet>;
  }
  override getDeployTransaction(
    tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(tokenAddress, overrides || {});
  }
  override attach(address: string): TestnetFaucet {
    return super.attach(address) as TestnetFaucet;
  }
  override connect(signer: Signer): TestnetFaucet__factory {
    return super.connect(signer) as TestnetFaucet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestnetFaucetInterface {
    return new utils.Interface(_abi) as TestnetFaucetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestnetFaucet {
    return new Contract(address, _abi, signerOrProvider) as TestnetFaucet;
  }
}
