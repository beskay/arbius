/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  SwapReceiver,
  SwapReceiverInterface,
} from "../../contracts/SwapReceiver";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "recover",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "recoverETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461005b5760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a361035390816100618239f35b600080fdfe60806040818152600436101561001457600080fd5b600091823560e01c9081635705ae43146101c457508063715018a6146101795780638da5cb5b14610152578063d33355531461010a5763f2fde38b1461005957600080fd5b346101065760203660031901126101065761007261028a565b61007a6102a5565b6001600160a01b039081169182156100b4575082546001600160a01b0319811683178455166000805160206102fe8339815191528380a380f35b5162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b5080fd5b5034610106576020366003190112610106578180808060043560018060a01b03825416828215610149575bf11561013f575080f35b51903d90823e3d90fd5b506108fc610135565b5034610106578160031936011261010657905490516001600160a01b039091168152602090f35b82346101c157806003193601126101c1576101926102a5565b80546001600160a01b03198116825581906001600160a01b03166000805160206102fe8339815191528280a380f35b80fd5b91905034610286578060031936011261028657602082604481866101e661028a565b815463a9059cbb60e01b84526001600160a01b0390811660048501526024803590850152165af1801561027c5761021b578280f35b6020903d8211610274575b601f8201601f19168301906001600160401b0382118483101761026057526020908201829003126101065751801515036101c15738808280f35b634e487b7160e01b85526041600452602485fd5b3d9150610226565b81513d85823e3d90fd5b8280fd5b600435906001600160a01b03821682036102a057565b600080fd5b6000546001600160a01b031633036102b957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfe8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a264697066735822122069c163b657cd051517adabe387471b7e98b5589619d7edc3c38982064ef38bee64736f6c63430008130033";

type SwapReceiverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapReceiverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapReceiver__factory extends ContractFactory {
  constructor(...args: SwapReceiverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SwapReceiver> {
    return super.deploy(overrides || {}) as Promise<SwapReceiver>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SwapReceiver {
    return super.attach(address) as SwapReceiver;
  }
  override connect(signer: Signer): SwapReceiver__factory {
    return super.connect(signer) as SwapReceiver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapReceiverInterface {
    return new utils.Interface(_abi) as SwapReceiverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapReceiver {
    return new Contract(address, _abi, signerOrProvider) as SwapReceiver;
  }
}
