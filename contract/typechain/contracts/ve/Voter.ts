/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface VoterInterface extends utils.Interface {
  functions: {
    "createGauge(bytes32)": FunctionFragment;
    "epochVoteEnd()": FunctionFragment;
    "getGaugeMultiplier(bytes32)": FunctionFragment;
    "isAlive(bytes32)": FunctionFragment;
    "isGauge(bytes32)": FunctionFragment;
    "isWhitelisted(bytes32)": FunctionFragment;
    "killGauge(bytes32)": FunctionFragment;
    "lastVoted(uint256)": FunctionFragment;
    "length()": FunctionFragment;
    "modelVote(uint256,uint256)": FunctionFragment;
    "models(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "poke(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reset(uint256)": FunctionFragment;
    "reviveGauge(bytes32)": FunctionFragment;
    "totalWeight()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usedWeights(uint256)": FunctionFragment;
    "vote(uint256,bytes32[],uint256[])": FunctionFragment;
    "voteMultiple(uint256[],bytes32[][],uint256[][])": FunctionFragment;
    "votes(uint256,bytes32)": FunctionFragment;
    "votingEscrow()": FunctionFragment;
    "weights(bytes32)": FunctionFragment;
    "whitelist(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createGauge"
      | "epochVoteEnd"
      | "getGaugeMultiplier"
      | "isAlive"
      | "isGauge"
      | "isWhitelisted"
      | "killGauge"
      | "lastVoted"
      | "length"
      | "modelVote"
      | "models"
      | "owner"
      | "poke"
      | "renounceOwnership"
      | "reset"
      | "reviveGauge"
      | "totalWeight"
      | "transferOwnership"
      | "usedWeights"
      | "vote"
      | "voteMultiple"
      | "votes"
      | "votingEscrow"
      | "weights"
      | "whitelist"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createGauge",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "epochVoteEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGaugeMultiplier",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAlive",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isGauge",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "killGauge",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastVoted",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "length", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "modelVote",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "models",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poke",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reset",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "reviveGauge",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "usedWeights",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "voteMultiple",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[][],
      PromiseOrValue<BigNumberish>[][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "votes",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "votingEscrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "weights",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochVoteEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGaugeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAlive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGauge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "killGauge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "length", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "modelVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "models", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reviveGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weights", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;

  events: {
    "Abstained(uint256,uint256)": EventFragment;
    "GaugeCreated(address,bytes32)": EventFragment;
    "GaugeKilled(bytes32)": EventFragment;
    "GaugeRevived(bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Voted(address,uint256,bytes32,uint256)": EventFragment;
    "Whitelisted(address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Abstained"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GaugeCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GaugeKilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GaugeRevived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Whitelisted"): EventFragment;
}

export interface AbstainedEventObject {
  tokenId: BigNumber;
  weight: BigNumber;
}
export type AbstainedEvent = TypedEvent<
  [BigNumber, BigNumber],
  AbstainedEventObject
>;

export type AbstainedEventFilter = TypedEventFilter<AbstainedEvent>;

export interface GaugeCreatedEventObject {
  creator: string;
  model: string;
}
export type GaugeCreatedEvent = TypedEvent<
  [string, string],
  GaugeCreatedEventObject
>;

export type GaugeCreatedEventFilter = TypedEventFilter<GaugeCreatedEvent>;

export interface GaugeKilledEventObject {
  model: string;
}
export type GaugeKilledEvent = TypedEvent<[string], GaugeKilledEventObject>;

export type GaugeKilledEventFilter = TypedEventFilter<GaugeKilledEvent>;

export interface GaugeRevivedEventObject {
  model: string;
}
export type GaugeRevivedEvent = TypedEvent<[string], GaugeRevivedEventObject>;

export type GaugeRevivedEventFilter = TypedEventFilter<GaugeRevivedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface VotedEventObject {
  voter: string;
  tokenId: BigNumber;
  model: string;
  weight: BigNumber;
}
export type VotedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  VotedEventObject
>;

export type VotedEventFilter = TypedEventFilter<VotedEvent>;

export interface WhitelistedEventObject {
  whitelister: string;
  model: string;
}
export type WhitelistedEvent = TypedEvent<
  [string, string],
  WhitelistedEventObject
>;

export type WhitelistedEventFilter = TypedEventFilter<WhitelistedEvent>;

export interface Voter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VoterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createGauge(
      _model: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    epochVoteEnd(overrides?: CallOverrides): Promise<[BigNumber]>;

    getGaugeMultiplier(
      _model: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isAlive(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isGauge(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelisted(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    killGauge(
      _model: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lastVoted(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    length(overrides?: CallOverrides): Promise<[BigNumber]>;

    modelVote(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    models(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poke(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reset(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reviveGauge(
      _model: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usedWeights(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vote(
      tokenId: PromiseOrValue<BigNumberish>,
      _modelVote: PromiseOrValue<BytesLike>[],
      _weights: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voteMultiple(
      tokenIds: PromiseOrValue<BigNumberish>[],
      _modelVote: PromiseOrValue<BytesLike>[][],
      _weights: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    votes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    votingEscrow(overrides?: CallOverrides): Promise<[string]>;

    weights(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    whitelist(
      _model: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createGauge(
    _model: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  epochVoteEnd(overrides?: CallOverrides): Promise<BigNumber>;

  getGaugeMultiplier(
    _model: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isAlive(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isGauge(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelisted(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  killGauge(
    _model: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lastVoted(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  length(overrides?: CallOverrides): Promise<BigNumber>;

  modelVote(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  models(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  poke(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reset(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reviveGauge(
    _model: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usedWeights(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vote(
    tokenId: PromiseOrValue<BigNumberish>,
    _modelVote: PromiseOrValue<BytesLike>[],
    _weights: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voteMultiple(
    tokenIds: PromiseOrValue<BigNumberish>[],
    _modelVote: PromiseOrValue<BytesLike>[][],
    _weights: PromiseOrValue<BigNumberish>[][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  votes(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  votingEscrow(overrides?: CallOverrides): Promise<string>;

  weights(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  whitelist(
    _model: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createGauge(
      _model: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    epochVoteEnd(overrides?: CallOverrides): Promise<BigNumber>;

    getGaugeMultiplier(
      _model: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAlive(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isGauge(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelisted(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    killGauge(
      _model: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    lastVoted(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    length(overrides?: CallOverrides): Promise<BigNumber>;

    modelVote(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    models(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    poke(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reset(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    reviveGauge(
      _model: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    usedWeights(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote(
      tokenId: PromiseOrValue<BigNumberish>,
      _modelVote: PromiseOrValue<BytesLike>[],
      _weights: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    voteMultiple(
      tokenIds: PromiseOrValue<BigNumberish>[],
      _modelVote: PromiseOrValue<BytesLike>[][],
      _weights: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<void>;

    votes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingEscrow(overrides?: CallOverrides): Promise<string>;

    weights(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelist(
      _model: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Abstained(uint256,uint256)"(
      tokenId?: null,
      weight?: null
    ): AbstainedEventFilter;
    Abstained(tokenId?: null, weight?: null): AbstainedEventFilter;

    "GaugeCreated(address,bytes32)"(
      creator?: null,
      model?: PromiseOrValue<BytesLike> | null
    ): GaugeCreatedEventFilter;
    GaugeCreated(
      creator?: null,
      model?: PromiseOrValue<BytesLike> | null
    ): GaugeCreatedEventFilter;

    "GaugeKilled(bytes32)"(
      model?: PromiseOrValue<BytesLike> | null
    ): GaugeKilledEventFilter;
    GaugeKilled(
      model?: PromiseOrValue<BytesLike> | null
    ): GaugeKilledEventFilter;

    "GaugeRevived(bytes32)"(
      model?: PromiseOrValue<BytesLike> | null
    ): GaugeRevivedEventFilter;
    GaugeRevived(
      model?: PromiseOrValue<BytesLike> | null
    ): GaugeRevivedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Voted(address,uint256,bytes32,uint256)"(
      voter?: PromiseOrValue<string> | null,
      tokenId?: null,
      model?: null,
      weight?: null
    ): VotedEventFilter;
    Voted(
      voter?: PromiseOrValue<string> | null,
      tokenId?: null,
      model?: null,
      weight?: null
    ): VotedEventFilter;

    "Whitelisted(address,bytes32)"(
      whitelister?: PromiseOrValue<string> | null,
      model?: PromiseOrValue<BytesLike> | null
    ): WhitelistedEventFilter;
    Whitelisted(
      whitelister?: PromiseOrValue<string> | null,
      model?: PromiseOrValue<BytesLike> | null
    ): WhitelistedEventFilter;
  };

  estimateGas: {
    createGauge(
      _model: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    epochVoteEnd(overrides?: CallOverrides): Promise<BigNumber>;

    getGaugeMultiplier(
      _model: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAlive(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGauge(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelisted(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    killGauge(
      _model: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lastVoted(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    length(overrides?: CallOverrides): Promise<BigNumber>;

    modelVote(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    models(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poke(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reset(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reviveGauge(
      _model: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usedWeights(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote(
      tokenId: PromiseOrValue<BigNumberish>,
      _modelVote: PromiseOrValue<BytesLike>[],
      _weights: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voteMultiple(
      tokenIds: PromiseOrValue<BigNumberish>[],
      _modelVote: PromiseOrValue<BytesLike>[][],
      _weights: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    votes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingEscrow(overrides?: CallOverrides): Promise<BigNumber>;

    weights(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelist(
      _model: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createGauge(
      _model: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    epochVoteEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGaugeMultiplier(
      _model: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAlive(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGauge(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelisted(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    killGauge(
      _model: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lastVoted(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    length(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    modelVote(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    models(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poke(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reset(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reviveGauge(
      _model: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usedWeights(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote(
      tokenId: PromiseOrValue<BigNumberish>,
      _modelVote: PromiseOrValue<BytesLike>[],
      _weights: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voteMultiple(
      tokenIds: PromiseOrValue<BigNumberish>[],
      _modelVote: PromiseOrValue<BytesLike>[][],
      _weights: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    votes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingEscrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weights(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelist(
      _model: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
